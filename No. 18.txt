import React, { Component } from 'react';
import { Text, View, TextInput, TouchableHighlight } from 'react-native';
import { validate } from 'validate.js';

import constraints from './constraints';

export default class MyForm extends Component {

  constructor(props) {
    super(props);
    this.state = { data: { emailAddress: "example@gmail.com" } };
    this._onPressButton = this._onPressButton.bind(this)
  }

  _onPressButton() {
    const validationResult = validate(this.state.data, constraints);
    // validationResult is undefined if there are no errors
    this.setState({ errors: validationResult });
  }

  render() {
      return (
        <View>
          <TextInput
            onChangeText={(email) => (
              this.setState({
                ...this.state,
                data: {
                  ...this.state.data,
                  emailAddress: email
                }
              })
            )}
            value={this.state.data.emailAddress}
          />

          <TouchableHighlight onPress={this._onPressButton}>
            <Text>Submit</Text>
          </TouchableHighlight>

          {this.isFieldInError('emailAddress') && this.getErrorsInField('emailAddress').map(errorMessage => <Text>{errorMessage}</Text>)}

          <Text>
            {this.getErrorMessages()}
          </Text>
        </View>
      );
  }

  getErrorMessages(separator="\n") {
    const { errors } = this.state;
    if (!errors) return [];

    return Object.values(errors).map(it => it.join(separator)).join(separator);
  }

  getErrorsInField(field) {
    const { errors } = this.state;
    return errors && errors[field] || [];
  }

  isFieldInError(field) {
    const { errors } = this.state;
    return errors && !!errors[field];
  }
}